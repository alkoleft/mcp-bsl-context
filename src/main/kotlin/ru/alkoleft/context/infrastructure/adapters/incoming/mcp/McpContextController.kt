/*
 * Copyright (c) 2025 alkoleft. All rights reserved.
 * This file is part of the mcp-bsl-context project.
 *
 * Licensed under the MIT License. See LICENSE file in the project root for full license information.
 */

package ru.alkoleft.context.infrastructure.adapters.incoming.mcp

import org.slf4j.LoggerFactory
import org.springframework.ai.tool.annotation.Tool
import org.springframework.ai.tool.annotation.ToolParam
import org.springframework.stereotype.Service
import ru.alkoleft.context.core.ports.incoming.ContextUseCase
import java.time.ZoneId
import java.time.format.DateTimeFormatter

/**
 * –¢–æ–Ω–∫–∏–π MCP –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
@Service
class McpContextController(
    private val contextUseCase: ContextUseCase,
) {
    companion object {
        private val log = LoggerFactory.getLogger(McpContextController::class.java)
        private val dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
     */
    @Tool(
        name = "loadContext",
        description = "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 1–° –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞.",
    )
    suspend fun loadContext(
        @ToolParam(description = "–ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 1–° –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
        path: String,
        @ToolParam(description = "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)")
        forceReload: Boolean = false,
    ): String {
        if (path.isBlank()) {
            return "‚ùå **–û—à–∏–±–∫–∞:** –ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        }

        try {
            val context =
                if (forceReload) {
                    contextUseCase.refreshContext()
                } else {
                    contextUseCase.loadContext(path)
                }

            log.info("Context loaded successfully from: {}", path)

            return buildString {
                appendLine("‚úÖ **–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ**")
                appendLine()
                appendLine("üìÅ **–ü—É—Ç—å:** `$path`")
                appendLine("üìä **–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** ${context.totalElements}")
                appendLine("üìÖ **–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:** ${context.loadedAt.atZone(ZoneId.systemDefault()).format(dateFormatter)}")
                appendLine("üîß **–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:** ${context.sources.joinToString()}")
                context.version?.let {
                    appendLine("üìã **–í–µ—Ä—Å–∏—è:** $it")
                }
                appendLine()
                appendLine("üîç –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!")
            }
        } catch (e: Exception) {
            log.error("Context loading error for path: $path", e)
            return "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:** ${e.message}"
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    @Tool(
        name = "contextStatus",
        description = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 1–° –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞.",
    )
    suspend fun getContextStatus(): String {
        try {
            val status = contextUseCase.getContextStatus()

            return buildString {
                if (status.isLoaded) {
                    appendLine("‚úÖ **–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ**")
                    appendLine()
                    appendLine("üìä **–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:** ${status.elementsCount}")
                    status.lastUpdate?.let {
                        appendLine("üìÖ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** ${it.atZone(ZoneId.systemDefault()).format(dateFormatter)}")
                    }

                    if (status.errors.isNotEmpty()) {
                        appendLine()
                        appendLine("‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**")
                        status.errors.forEach { error ->
                            appendLine("- $error")
                        }
                    }
                } else {
                    appendLine("‚ùå **–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω**")
                    appendLine()
                    appendLine("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç `loadContext` –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.")

                    if (status.errors.isNotEmpty()) {
                        appendLine()
                        appendLine("üî¥ **–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏:**")
                        status.errors.forEach { error ->
                            appendLine("- $error")
                        }
                    }
                }
            }
        } catch (e: Exception) {
            log.error("Status check error", e)
            return "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:** ${e.message}"
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    @Tool(
        name = "refreshContext",
        description = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 1–°. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.",
    )
    suspend fun refreshContext(): String {
        try {
            val context = contextUseCase.refreshContext()

            log.info("Context refreshed successfully")

            return buildString {
                appendLine("üîÑ **–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ**")
                appendLine()
                appendLine("üìä **–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** ${context.totalElements}")
                appendLine("üìÖ **–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** ${context.loadedAt.atZone(ZoneId.systemDefault()).format(dateFormatter)}")
                appendLine("üîß **–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:** ${context.sources.joinToString()}")
                context.version?.let {
                    appendLine("üìã **–í–µ—Ä—Å–∏—è:** $it")
                }
                appendLine()
                appendLine("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            }
        } catch (e: Exception) {
            log.error("Context refresh error", e)
            return "‚ùå **–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:** ${e.message}"
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
     */
    @Tool(
        name = "getDataSources",
        description = "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 1–°.",
    )
    suspend fun getDataSources(): String {
        try {
            val sources = contextUseCase.getAvailableDataSources()

            return buildString {
                appendLine("üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**")
                appendLine()
                sources.forEach { source ->
                    appendLine("- **${source.name}**: ${getSourceDescription(source.name)}")
                }
                appendLine()
                appendLine("üí° –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ BSL_CONTEXT.")
            }
        } catch (e: Exception) {
            log.error("Data sources retrieval error", e)
            return "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:** ${e.message}"
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    private fun getSourceDescription(sourceName: String): String =
        when (sourceName) {
            "BSL_CONTEXT" -> "–û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ API –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
            "CONFIGURATION" -> "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)"
            "EXTENSION" -> "–†–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)"
            "DOCUMENTATION" -> "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)"
            else -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"
        }
}
