/*
 * Copyright (c) 2025 alkoleft. All rights reserved.
 * This file is part of the mcp-bsl-context project.
 *
 * Licensed under the MIT License. See LICENSE file in the project root for full license information.
 */

package ru.alkoleft.context.infrastructure.adapters.outgoing.formatters

import org.springframework.stereotype.Component
import ru.alkoleft.context.core.domain.api.ApiElement
import ru.alkoleft.context.core.domain.search.SearchResult
import ru.alkoleft.context.core.ports.outgoing.FormatType
import ru.alkoleft.context.core.ports.outgoing.ResultFormatter

/**
 * Markdown —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
 * –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
@Component
class McpMarkdownFormatter : ResultFormatter {
    override val formatType = FormatType.MARKDOWN

    override fun getMimeType(): String = "text/markdown"

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ Markdown
     */
    override suspend fun formatSearchResults(result: SearchResult): String {
        return buildString {
            appendLine("# üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \"${result.query.text}\"")
            appendLine()

            if (result.items.isEmpty()) {
                appendLine("‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**")
                appendLine()
                appendLine("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
                appendLine("- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ")
                appendLine("- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã")
                appendLine("- –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã")
                return@buildString
            }

            appendLine("üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:**")
            appendLine("- –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: **${result.items.size}**")
            appendLine("- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: **${result.executionTimeMs}–º—Å**")
            appendLine("- –ê–ª–≥–æ—Ä–∏—Ç–º: **${result.algorithm.name}**")
            appendLine()

            result.items.forEachIndexed { index, item ->
                val element = item.element
                appendLine("## ${index + 1}. ${formatElementHeader(element)}")

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                val relevancePercent = (item.relevanceScore * 100).toInt()
                appendLine("**–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:** $relevancePercent% | **–ü—Ä–∏—á–∏–Ω–∞:** ${formatMatchReason(item.matchReason)}")

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if (element.description.isNotBlank()) {
                    appendLine()
                    appendLine("üìù ${element.description}")
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                item.highlightedText?.let { highlighted ->
                    appendLine()
                    appendLine("üîç **–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ:** $highlighted")
                }

                appendLine()
                appendLine("---")
                appendLine()
            }
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
     */
    override suspend fun formatDetailedInfo(element: ApiElement): String =
        buildString {
            appendLine("# üìã ${formatElementHeader(element)}")
            appendLine()

            appendLine("**–ò—Å—Ç–æ—á–Ω–∏–∫:** ${element.source.name}")
            appendLine()

            if (element.description.isNotBlank()) {
                appendLine("## üìù –û–ø–∏—Å–∞–Ω–∏–µ")
                appendLine(element.description)
                appendLine()
            }

            when (element) {
                is ru.alkoleft.context.core.domain.api.Method -> {
                    appendLine("## üîß –î–µ—Ç–∞–ª–∏ –º–µ—Ç–æ–¥–∞")
                    appendLine("- **–ì–ª–æ–±–∞–ª—å–Ω—ã–π:** ${if (element.isGlobal) "–î–∞" else "–ù–µ—Ç"}")
                    element.parentType?.let {
                        appendLine("- **–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–ø:** ${it.name}")
                    }
                    element.returnType?.let {
                        appendLine("- **–¢–∏–ø –≤–æ–∑–≤—Ä–∞—Ç–∞:** ${it.name}")
                    }

                    if (element.signatures.isNotEmpty()) {
                        appendLine()
                        appendLine("### üìã –°–∏–≥–Ω–∞—Ç—É—Ä—ã (${element.signatures.size})")
                        element.signatures.forEachIndexed { index, signature ->
                            appendLine("#### –°–∏–≥–Ω–∞—Ç—É—Ä–∞ ${index + 1}")
                            if (signature.parameters.isNotEmpty()) {
                                appendLine("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                                signature.parameters.forEach { param ->
                                    val optional = if (param.isOptional) " *(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)*" else ""
                                    appendLine("- `${param.name}`: ${param.type.name}$optional")
                                    if (param.description.isNotBlank()) {
                                        appendLine("  - ${param.description}")
                                    }
                                }
                            }
                            signature.returnType?.let {
                                appendLine("**–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:** ${it.name}")
                            }
                        }
                    }
                }

                is ru.alkoleft.context.core.domain.api.Property -> {
                    appendLine("## üìã –î–µ—Ç–∞–ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞")
                    appendLine("- **–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:** ${element.dataType.name}")
                    appendLine("- **–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ:** ${if (element.isReadonly) "–î–∞" else "–ù–µ—Ç"}")
                    element.parentType?.let {
                        appendLine("- **–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–ø:** ${it.name}")
                    }
                }

                is ru.alkoleft.context.core.domain.api.Type -> {
                    appendLine("## üè∑Ô∏è –î–µ—Ç–∞–ª–∏ —Ç–∏–ø–∞")
                    appendLine("- **–ú–µ—Ç–æ–¥–æ–≤:** ${element.methods.size}")
                    appendLine("- **–°–≤–æ–π—Å—Ç–≤:** ${element.properties.size}")
                    appendLine("- **–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤:** ${element.constructors.size}")
                }

                is ru.alkoleft.context.core.domain.api.Constructor -> {
                    appendLine("## üèóÔ∏è –î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞")
                    appendLine("- **–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–ø:** ${element.parentType.name}")
                    if (element.parameters.isNotEmpty()) {
                        appendLine()
                        appendLine("### üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
                        element.parameters.forEach { param ->
                            val optional = if (param.isOptional) " *(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)*" else ""
                            appendLine("- `${param.name}`: ${param.type.name}$optional")
                            if (param.description.isNotBlank()) {
                                appendLine("  - ${param.description}")
                            }
                        }
                    }
                }
            }
        }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    override suspend fun formatElementList(
        elements: List<ApiElement>,
        title: String?,
    ): String {
        return buildString {
            title?.let {
                appendLine("# $it")
                appendLine()
            }

            if (elements.isEmpty()) {
                appendLine("‚ùå **–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**")
                return@buildString
            }

            appendLine("üìã **–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:** ${elements.size}")
            appendLine()

            val groupedElements =
                elements.groupBy { element ->
                    when (element) {
                        is ru.alkoleft.context.core.domain.api.Method -> "üîß –ú–µ—Ç–æ–¥—ã"
                        is ru.alkoleft.context.core.domain.api.Property -> "üìã –°–≤–æ–π—Å—Ç–≤–∞"
                        is ru.alkoleft.context.core.domain.api.Type -> "üè∑Ô∏è –¢–∏–ø—ã"
                        is ru.alkoleft.context.core.domain.api.Constructor -> "üèóÔ∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã"
                    }
                }

            groupedElements.forEach { (category, elementList) ->
                appendLine("## $category (${elementList.size})")
                appendLine()

                elementList.take(10).forEach { element ->
                    appendLine("- **${element.name}**")
                    if (element.description.isNotBlank()) {
                        appendLine("  - ${element.description}")
                    }
                }

                if (elementList.size > 10) {
                    appendLine("- *...–∏ –µ—â—ë ${elementList.size - 10} —ç–ª–µ–º–µ–Ω—Ç–æ–≤*")
                }

                appendLine()
            }
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    private fun formatElementHeader(element: ApiElement): String =
        when (element) {
            is ru.alkoleft.context.core.domain.api.Method -> "üîß ${element.name}()"
            is ru.alkoleft.context.core.domain.api.Property -> "üìã ${element.name}"
            is ru.alkoleft.context.core.domain.api.Type -> "üè∑Ô∏è ${element.name}"
            is ru.alkoleft.context.core.domain.api.Constructor -> "üèóÔ∏è ${element.name}"
        }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
     */
    private fun formatMatchReason(matchReason: ru.alkoleft.context.core.domain.search.MatchReason): String =
        when (matchReason) {
            is ru.alkoleft.context.core.domain.search.MatchReason.ExactMatch ->
                "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ ${matchReason.field}"
            is ru.alkoleft.context.core.domain.search.MatchReason.PrefixMatch ->
                "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –≤ ${matchReason.field}"
            is ru.alkoleft.context.core.domain.search.MatchReason.ContainsMatch ->
                "–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –≤ ${matchReason.field}"
            is ru.alkoleft.context.core.domain.search.MatchReason.FuzzyMatch ->
                "–ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ ${matchReason.field} (${(matchReason.similarity * 100).toInt()}%)"
            is ru.alkoleft.context.core.domain.search.MatchReason.SemanticMatch ->
                "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (${(matchReason.similarity * 100).toInt()}%)"
            is ru.alkoleft.context.core.domain.search.MatchReason.MultipleMatches -> {
                "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (${matchReason.reasons.size})"
            }
        }
}
