/*
 * Copyright (c) 2024-2025 alkoleft. All rights reserved.
 * This file is part of the mcp-bsl-context project.
 *
 * Licensed under the MIT License. See LICENSE file in the project root for full license information.
 */

package ru.alkoleft.context.platform.mcp

import org.springframework.stereotype.Service
import ru.alkoleft.context.platform.dto.ISignature
import ru.alkoleft.context.platform.dto.MethodDefinition
import ru.alkoleft.context.platform.dto.PlatformTypeDefinition
import ru.alkoleft.context.platform.dto.PropertyDefinition
import ru.alkoleft.context.platform.dto.Signature

/**
 * Kotlin —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ Markdown –¥–ª—è MCP
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
 * - –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å sealed classes
 * - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
 * - String templates —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç—å—é
 * - Extension functions –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DTO
 * - Null safety
 */
@Service
class MarkdownFormatterService {
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    fun formatSearchResults(
        query: String,
        results: List<Any>,
    ): String {
        if (results.isEmpty()) {
            return formatEmptyResults(query)
        }

        return buildString {
            appendLine("# üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \"$query\" (${results.size} –Ω–∞–π–¥–µ–Ω–æ)")
            appendLine()

            when {
                results.size == 1 -> {
                    // –û–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    append(formatSingleObject(results.first()))
                }

                results.size <= 5 -> {
                    // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ
                    results.forEachIndexed { index, result ->
                        append(formatCompactObject(result, index == 0))
                        if (index < results.size - 1) {
                            appendLine("\n---\n")
                        }
                    }
                }

                else -> {
                    // –ú–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–æ–ø-5
                    appendLine("## –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n")
                    appendLine("| –ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø | –°–∏–≥–Ω–∞—Ç—É—Ä–∞ |")
                    appendLine("|----------|-----|-----------|")

                    results.forEach { result ->
                        appendLine("| **${result.objectName}** | ${result.typeIcon} | `${result.signature.truncate(40)}` |")
                    }

                    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    appendLine("\n---\n")
                    appendLine("## ‚≠ê –ù–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n")
                    append(formatSingleObject(results.first()))
                }
            }
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
     */
    fun formatDetailedInfo(obj: Any): String =
        when (obj) {
            is MethodDefinition -> formatMethodDefinition(obj)
            is PropertyDefinition -> formatPropertyDefinition(obj)
            is PlatformTypeDefinition -> formatPlatformTypeDefinition(obj)
            else -> "‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:** ${obj::class.simpleName}"
        }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ —Ç–∏–ø–∞
     */
    fun formatConstructors(
        constructors: List<ISignature>,
        typeName: String,
    ): String =
        buildString {
            appendLine("# üî® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã —Ç–∏–ø–∞ $typeName (${constructors.size} –Ω–∞–π–¥–µ–Ω–æ)\n")

            constructors.forEachIndexed { index, constructor ->
                appendLine("## –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ${index + 1}")
                appendLine("```bsl")
                val params = constructor.params.joinToString(", ") { "${it.name}: ${it.type}" }
                appendLine("–ù–æ–≤—ã–π $typeName($params)")
                appendLine("```\n")

                constructor.description.takeIf { it.isNotBlank() }?.let {
                    appendLine("**–û–ø–∏—Å–∞–Ω–∏–µ:** $it\n")
                }

                if (constructor.params.isNotEmpty()) {
                    appendLine("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                    constructor.params.forEach { param ->
                        val requiredMark = if (param.required) "(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)" else ""
                        val description = param.description
                        appendLine("- **${param.name}** *(${param.type})* $requiredMark - $description")
                    }
                    appendLine()
                }
            }
        }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞
     */
    fun formatTypeMembers(type: PlatformTypeDefinition): String =
        buildString {
            appendLine("# üì¶ –≠–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ ${type.name}\n")

            // –ú–µ—Ç–æ–¥—ã
            if (type.methods.isNotEmpty()) {
                appendLine("## üîß –ú–µ—Ç–æ–¥—ã (${type.methods.size})\n")
                type.methods.forEach { method ->
                    val signature = method.buildMethodSignature()
                    val description = method.description
                    appendLine("- **$signature** - $description")
                }
                appendLine()
            }

            // –°–≤–æ–π—Å—Ç–≤–∞
            if (type.properties.isNotEmpty()) {
                appendLine("## üìã –°–≤–æ–π—Å—Ç–≤–∞ (${type.properties.size})\n")
                type.properties.forEach { property ->
                    val description = property.description
                    appendLine("- **${property.name}** *(${property.type})* - $description")
                }
                appendLine()
            }

            // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
            if (type.constructors.isNotEmpty()) {
                appendLine("## üî® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã (${type.constructors.size})\n")
                appendLine("*–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ getConstructors*\n")
            }
        }

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    private fun formatEmptyResults(query: String): String =
        """
        ‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É:** `$query`

        üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**
        - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ
        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å
        - –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã
        """.trimIndent()

    private fun formatMethodDefinition(method: MethodDefinition): String =
        buildString {
            appendLine("# üîß ${method.name}\n")

            // –°–∏–≥–Ω–∞—Ç—É—Ä—ã
            method.signature.forEach { signature ->
                appendLine("## –°–∏–≥–Ω–∞—Ç—É—Ä–∞: ${signature.name} (${signature.description})")
                appendLine("```bsl")
                appendLine(method.buildMethodSignature(signature))
                appendLine("```\n")

                // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
                if (signature.params.isNotEmpty()) {
                    appendLine("### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
                    signature.params.forEach { param ->
                        val requiredMark = if (param.required) "(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)" else ""
                        val description = param.description
                        appendLine("- **${param.name}** *(${param.type})* $requiredMark - $description")
                    }
                    appendLine()
                }
            }

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            method.returnType.let { returnType ->
                appendLine("## –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                val returnTypeDef = method.getReturnTypeDefinition()
                val description = returnTypeDef.description
                appendLine("**${returnTypeDef.name}** - $description\n")
            }

            // –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
            method.description.takeIf { it.isNotBlank() }?.let {
                appendLine("## –û–ø–∏—Å–∞–Ω–∏–µ")
                appendLine(it)
            }
        }

    private fun formatPropertyDefinition(property: PropertyDefinition): String =
        buildString {
            appendLine("# üìã ${property.name}\n")

            appendLine("**–¢–∏–ø:** ${property.type}")
            appendLine("**–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:** ${if (property.readonly) "–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ" else "–ß—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å"}")
            appendLine()

            property.description.takeIf { it.isNotBlank() }?.let {
                appendLine("## –û–ø–∏—Å–∞–Ω–∏–µ")
                appendLine(it)
            }
        }

    private fun formatPlatformTypeDefinition(type: PlatformTypeDefinition): String =
        buildString {
            appendLine("# üì¶ ${type.name}\n")

            type.description.takeIf { it.isNotBlank() }?.let {
                appendLine("## –û–ø–∏—Å–∞–Ω–∏–µ")
                appendLine("$it\n")
            }

            // –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            appendLine("## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            appendLine("- **–ú–µ—Ç–æ–¥—ã:** ${type.methods.size}")
            appendLine("- **–°–≤–æ–π—Å—Ç–≤–∞:** ${type.properties.size}")
            appendLine("- **–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã:** ${type.constructors.size}")
            appendLine()

            // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã (—Ç–æ–ø-5)
            if (type.methods.isNotEmpty()) {
                appendLine("## –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã")
                type.methods.take(5).forEach { method ->
                    val signature = method.buildMethodSignature()
                    appendLine("- `$signature`")
                }
                if (type.methods.size > 5) {
                    appendLine("- *...–∏ –µ—â—ë ${type.methods.size - 5} –º–µ—Ç–æ–¥–æ–≤*")
                }
                appendLine()
            }

            // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ (—Ç–æ–ø-5)
            if (type.properties.isNotEmpty()) {
                appendLine("## –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞")
                type.properties.take(5).forEach { property ->
                    appendLine("- **${property.name}** *(${property.type})*")
                }
                if (type.properties.size > 5) {
                    appendLine("- *...–∏ –µ—â—ë ${type.properties.size - 5} —Å–≤–æ–π—Å—Ç–≤*")
                }
                appendLine()
            }

            appendLine("üí° *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getMembers –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞*")
        }

    private fun formatSingleObject(obj: Any): String =
        when (obj) {
            is MethodDefinition -> formatMethodDefinition(obj)
            is PropertyDefinition -> formatPropertyDefinition(obj)
            is PlatformTypeDefinition -> formatPlatformTypeDefinition(obj)
            else -> "‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:** ${obj::class.simpleName}"
        }

    private fun formatCompactObject(
        obj: Any,
        isFirst: Boolean,
    ): String =
        buildString {
            val prefix = if (isFirst) "‚≠ê" else "‚Ä¢"

            when (obj) {
                is MethodDefinition -> {
                    appendLine("$prefix **${obj.name}** (–ú–µ—Ç–æ–¥)")
                    appendLine("   - –°–∏–≥–Ω–∞—Ç—É—Ä–∞: `${obj.buildMethodSignature()}`")
                    obj.description.takeIf { it.isNotBlank() }?.let {
                        appendLine("   - –û–ø–∏—Å–∞–Ω–∏–µ: $it")
                    }
                }

                is PropertyDefinition -> {
                    appendLine("$prefix **${obj.name}** (–°–≤–æ–π—Å—Ç–≤–æ)")
                    appendLine("   - –¢–∏–ø: `${obj.type}`")
                    appendLine("   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${if (obj.readonly) "–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ" else "–ß—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å"}")
                    obj.description.takeIf { it.isNotBlank() }?.let {
                        appendLine("   - –û–ø–∏—Å–∞–Ω–∏–µ: $it")
                    }
                }

                is PlatformTypeDefinition -> {
                    appendLine("$prefix **${obj.name}** (–¢–∏–ø)")
                    appendLine("   - –ú–µ—Ç–æ–¥—ã: ${obj.methods.size}, –°–≤–æ–π—Å—Ç–≤–∞: ${obj.properties.size}")
                    obj.description.takeIf { it.isNotBlank() }?.let {
                        appendLine("   - –û–ø–∏—Å–∞–Ω–∏–µ: $it")
                    }
                }
            }
        }

    // Extension functions –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

    private val Any.objectName: String
        get() =
            when (this) {
                is MethodDefinition -> name
                is PropertyDefinition -> name
                is PlatformTypeDefinition -> name
                else -> toString()
            }

    private val Any.typeIcon: String
        get() =
            when (this) {
                is MethodDefinition -> "üîß –ú–µ—Ç–æ–¥"
                is PropertyDefinition -> "üìã –°–≤–æ–π—Å—Ç–≤–æ"
                is PlatformTypeDefinition -> "üì¶ –¢–∏–ø"
                else -> "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }

    private val Any.signature: String
        get() =
            when (this) {
                is MethodDefinition -> buildMethodSignature()
                is PropertyDefinition -> "$name: $type"
                is PlatformTypeDefinition -> name
                else -> toString()
            }

    private fun String.truncate(maxLength: Int): String = if (length <= maxLength) this else "${take(maxLength - 3)}..."

    private fun MethodDefinition.buildMethodSignature(): String {
        val firstSignature = signature.firstOrNull() ?: return name
        return buildMethodSignature(firstSignature)
    }

    private fun MethodDefinition.buildMethodSignature(signature: Signature): String {
        val params =
            signature.params.joinToString(", ") { param ->
                "${param.name}: ${param.type}"
            }
        return "$name($params): $returnType"
    }
}
