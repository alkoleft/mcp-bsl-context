/*
 * Copyright (c) 2024-2025 alkoleft. All rights reserved.
 * This file is part of the mcp-bsl-context project.
 *
 * Licensed under the MIT License. See LICENSE file in the project root for full license information.
 */

package ru.alkoleft.context.platform.search

import kotlinx.coroutines.*
import org.springframework.ai.tool.annotation.Tool
import org.springframework.ai.tool.annotation.ToolParam
import org.springframework.cache.annotation.Cacheable
import org.springframework.stereotype.Service
import ru.alkoleft.context.platform.dto.ApiType
import ru.alkoleft.context.platform.dto.SearchQuery
import ru.alkoleft.context.platform.dto.SearchResults
import ru.alkoleft.context.platform.mcp.PlatformApiSearchService

/**
 * Kotlin Search Service —Å DSL –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 *
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ 1–° –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Java —Å–µ—Ä–≤–∏—Å–æ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
@Service
class KotlinSearchService(
    private val javaSearchService: PlatformApiSearchService
) {

    /**
     * –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Kotlin DSL
     */
    suspend fun searchTyped(block: SearchContext.() -> SearchQuery): SearchResults = withContext(Dispatchers.IO) {
        val query = search(block)
        executeSearch(query)
    }

    /**
     * MCP Tool –º–µ—Ç–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Kotlin DSL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
     * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     */
    @Tool(
        name = "kotlin_search",
        description = "–¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 1–° –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Kotlin DSL"
    )
    @Cacheable("kotlin-search")
    suspend fun search(
        @ToolParam(description = "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å") query: String,
        @ToolParam(description = "–¢–∏–ø API —ç–ª–µ–º–µ–Ω—Ç–∞: method, property, type") type: String? = null,
        @ToolParam(description = "–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤") limit: Int? = null,
        @ToolParam(description = "–†–µ–∂–∏–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞") intelligent: Boolean? = null
    ): String = withContext(Dispatchers.IO) {

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ DSL
        val searchQuery = search {
            query(query) {
                type?.let { t -> ApiType.fromString(t)?.let { type(it) } }
                limit?.let { limit(it) }
                intelligent?.let {
                    options {
                        this.intelligent = it
                    }
                }
            }
        }

        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        executeSearch(searchQuery)

        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ Java —Å–µ—Ä–≤–∏—Å—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        javaSearchService.search(query, type, limit ?: 10)
    }

    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Tool –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π DSL
     */
    @Tool(
        name = "kotlin_search_demo",
        description = "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Kotlin DSL –¥–ª—è –ø–æ–∏—Å–∫–∞"
    )
    fun searchDemo(): String {
        return buildString {
            appendLine("üéØ **Kotlin Search DSL Demo:**")
            appendLine("")
            appendLine("**–°–∏–Ω—Ç–∞–∫—Å–∏—Å:**")
            appendLine("```kotlin")
            appendLine("search {")
            appendLine("    query(\"—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫\") {")
            appendLine("        type(ApiType.METHOD)")
            appendLine("        limit(10)")
            appendLine("        options {")
            appendLine("            intelligent = true")
            appendLine("            exactMatch = false")
            appendLine("        }")
            appendLine("    }")
            appendLine("}")
            appendLine("```")
            appendLine("")
            appendLine("**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**")
            appendLine("- ‚úÖ –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
            appendLine("- ‚úÖ IDE –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
            appendLine("- ‚úÖ Readable DSL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
            appendLine("- ‚úÖ Kotlin Coroutines –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏")
            appendLine("- ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Spring Cache")
            appendLine("- ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Java API")
        }
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
     */
    private suspend fun executeSearch(query: SearchQuery): SearchResults = withContext(Dispatchers.IO) {
        // –ü–æ–∫–∞ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –∫ Java —Å–µ—Ä–≤–∏—Å—É, –≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ —á–∏—Å—Ç—É—é Kotlin —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        javaSearchService.search(
            query.text,
            query.type?.toStringType(),
            query.limit
        )

        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        // –í –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ SearchResults
        SearchResults()
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∫–æ—Ä—É—Ç–∏–Ω–∞–º–∏ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è)
     */
    suspend fun searchAsync(queries: List<SearchQuery>): List<SearchResults> = coroutineScope {
        queries.map { query ->
            async { executeSearch(query) }
        }.awaitAll()
    }
} 